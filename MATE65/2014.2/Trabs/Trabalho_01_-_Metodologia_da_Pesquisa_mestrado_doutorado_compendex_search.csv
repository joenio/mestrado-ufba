Title,Accession number,Author,Author affiliation,Corresponding author,Editor,Source,Abbreviated source title,Sponsor,Publisher,Volume,Issue,Pages,Issue date,Monograph title,Publication year,Language,ISSN,E-ISSN,ISBN,ISBN13,DOI,Article number,Conference name,Conference date,Conference location,Conference code,CODEN,Document type,Abstract,Abstract type,Number of references,Main heading,Controlled/Subject terms,Uncontrolled terms,Classification code,Treatment,Database,Copyright,Data Provider
"An effective visual system for static analysis of source code","20120414713043","Wan, Ying (1); Tan, Chuanqi (2); Wang, Zhigang (1, 2); Wang, Guoqiang (1); Hong, Xiaojin (1) ","(1) Lab of Computer Network Defense Technology, Beijing Institute of Technology, China (2) School of Mechatronical Engineering, Beijing Institute of Technology, China ","Wan, Y.(wanyinga@gmail.com) ","","Advanced Materials Research","Adv. Mater. Res.","Singapore Institute of Electronics","Trans Tech Publications, P.O. Box 1254, Clausthal-Zellerfeld, D-38670, Germany","433-440","","5453-5458","2012","Materials Science and Information Technology, MSIT2011","2012","English","10226680","","","9783037853191","10.4028/www.scientific.net/AMR.433-440.5453","","2011 International Conference on Material Science and Information Technology, MSIT2011","September 16, 2011 - September 18, 2011","Singapore, Singapore","88150","","Conference article (CA)","In the software development lifecycle, code static analysis takes an important part in building secure software. To help discover the potential security issues in source code, large numbers of static analysis tools are developed. But the results generated by them display in the form of pure text, so it is time-consuming for developers to analyze these text messages, and it is difficult for developers to concentrate on the most interesting defects in huge data. In this paper, we have developed a visualization system oriented to Java source code, which presents the results in graphics from a developer's point of view, to help developers to analysis code defects. A novel layout is proposed to visualize software source code in a hierarchy way, which shows the physical structure of the software. A visual overview and powerful interaction is provided in this system which allows the developer to focus on the most pressing defects within huge volumes of source code. © (2012) Trans Tech Publications, Switzerland.","","9","Static analysis","Building codes - Codes (symbols) - Computer programming languages - Defects - Information technology - Software design - Telephone systems - Visualization","In-buildings - Java source codes - Physical structures - Secure software - Security issues - Software development life cycle - Software source codes - Source codes - Text messages - Visual systems - Visualization system","903 Information Science - 902.1 Engineering Graphics - 723 Computer Software, Data Handling and Applications - 951 Materials Science - 718.1 Telephone Systems and Equipment - 403 Urban and Regional Planning and Development - 402 Buildings and Towers - 423 Non Mechanical Properties and Tests of Building Materials",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Software metrics in static program analysis","20104913455362","Vogelsang, Andreas (1); Fehnker, Ansgar (2); Huuck, Ralf (2); Reif, Wolfgang (3) ","(1) Fakultät für Informatik, Technische Universität München, Boltzmannstr. 3, Garching b., München 85748, Germany (2) National ICT Australia Ltd. (NICTA), University of New South Wales, Locked Bag 6016, Sydney, NSW 1466, Australia (3) Lehrstuhl für Softwaretechnik und Programmiersprachen, Universität Augsburg, Universtitätsstrasse 14, Augsburg 86135, Germany ","Vogelsang, A.(andreas.vogelsang@in.tum.de) ","","Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","Lect. Notes Comput. Sci.","","Springer Verlag, Tiergartenstrasse 17, Heidelberg, D-69121, Germany","6447 LNCS","","485-500","2010","Formal Methods and Software Engineering - 12th International Conference on Formal Engineering Methods, ICFEM 2010, Proceedings","2010","English","03029743","16113349","3642169007","9783642169007","10.1007/978-3-642-16901-4_32","","12th International Conference on Formal Engineering Methods, ICFEM 2010","November 17, 2010 - November 19, 2010","Shanghai, China","82780","","Conference article (CA)","Software metrics play an important role in the management of professional software projects. Metrics are used, e.g., to track development progress, to measure restructuring impact and to estimate code quality. They are most beneficial if they can be computed continuously at development time. This work presents a framework and an implementation for integrating metric computations into static program analysis. The contributions are a language and formal semantics for user-definable metrics, an implementation and integration in the existing static analysis tool , and a user-definable visualization approach to display metrics results. Moreover, we report our experiences on a case study of a popular open source code base. © 2010 Springer-Verlag Berlin Heidelberg.","","16","Formal methods","Computer software maintenance - Computer software selection and evaluation - Integration - Quality control - Semantics - Static analysis - Visualization","Code quality - Development time - Formal Semantics - Open-source code - Professional software - Software maintenance - software metrics - Software Quality - Static program analysis - Track development","723 Computer Software, Data Handling and Applications - 902.1 Engineering Graphics - 903.2 Information Dissemination - 913.3 Quality Assurance and Control - 921.2 Calculus",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"ClonEvol: Visualizing software evolution with code clones","20140217175967","Hanjalic, Avdo (1) ","(1) Department of Computing Science, University of Groningen, Netherlands ","Hanjalic, A.(a.hanjalic@student.rug.nl) ","","2013 1st IEEE Working Conference on Software Visualization - Proceedings of VISSOFT 2013","IEEE Work. Conf. Softw. Vis. - Proc. VISSOFT","","IEEE Computer Society, 2001 L Street N.W., Suite 700, Washington, DC 20036-4928, United States","","","","2013","2013 1st IEEE Working Conference on Software Visualization - Proceedings of VISSOFT 2013","2013","English","","","","9781479914579","10.1109/VISSOFT.2013.6650525","6650525","2013 1st IEEE Working Conference on Software Visualization, VISSOFT 2013","September 27, 2013 - September 28, 2013","Eindhoven, Netherlands","101610","","Conference article (CA)","We present ClonEvol, a visual analysis tool that assists in obtaining insight into the state and the evolution of a C/C++/Java source code base on project, file and scope level. ClonEvol combines information obtained from the software versioning system and contents of files that change between versions; The tool operates as tool-chain of Subversion (SVN), Doxygen (applied as static analyzer) and Simian as code duplication detector. The consolidated information is presented to the user in an interactive visual manner. The focus of the presented tool lies on scalability (in time and space) concerning data acquisition, data processing and visualization, and ease of use. The visualization is approached by using a (mirrored) radial tree to show the file and scope structures, complemented with hierarchically bundled edges that show clone relations. We demonstrate the use of ClonEvol on a real world code base. © 2013 IEEE.","","11","Cloning","Data acquisition - Tools - Visualization","Code clone - Code duplication - Software Evolution - Software evolution analysis - Software visualization - Static analyzers - Versioning systems - Visual analysis","461.8.1 Genetic Engineering - 603 Machine Tools - 605 Small Tools and Hardware - 723.2 Data Processing and Image Processing - 902.1 Engineering Graphics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Combining static and dynamic data in code visualization","2003307565904","Eng, David (1) ","(1) Sable Research Group, McGill University, Montreal, Que., H3A 2A7, Canada ","Eng, D.(flynn@sable.mcgill.ca) ","","ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering","ACM SIGPLAN SIGSOFT Workshop Program Anal Software Tools Eng","Association for Computing and Machinery; Special Interest Group om Programming Languages; Special Interest Group on Software Engineering","Association for Computing Machinery","","","43-50","2002","","2002","English","","","","","10.1145/586094.586105","","Proceedings of the 4th 2002 ACM SIGPLAN SIGSOFT Workshop on Program Analysis for Software Tools and Engineering","November 18, 2002 - November 19, 2002","Charleston, SC, United states","61232","","Conference article (CA)","The task of developing, tuning, and debugging compiler optimizations is a difficult one which can be facilitated by software visualization. There are many characteristics of the code which must be considered when studying the kinds of optimizations which can be performed. Both static data collected at compile-time and dynamic runtime data can reveal opportunities for optimization and affect code transformations. In order to expose the behavior of such complex systems, visualizations should include as much information as possible and accommodate the different sources from which this information is acquired. This paper presents a visualization framework designed to address these issues. The framework is based on a new, extensible language called JIL which provides a common format for encapsulating intermediate representations and associating them with compile-time and runtime data. We present new contributions which extend existing compiler and profiling frameworks, allowing them to export the intermediate languages, analysis results, and code metadata they collect as JIL documents. Visualization interfaces can then combine the JIL data from separate tools, exposing both static and dynamic characteristics of the underlying code. We present such an interface in the form of a new web-based visualizer, allowing JIL documents to be visualized online in a portable, customizable interface.","","18","Program compilers","Computer software - Data acquisition - Interfaces (computer) - Java programming language - Performance - Program debugging - Visualization","Dynamic data","722.2 Computer Peripheral Equipment - 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.2 Data Processing and Image Processing","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Three-dimensional visualization tool for software fault analysis of a distributed system","2000265170043","Amari, Haruo (1); Okada, Mikio (1) ","(1) Tokyo Electric Power Co, Yokohama, Japan ","Amari, Haruo ","","Proceedings of the IEEE International Conference on Systems, Man and Cybernetics","Proc IEEE Int Conf Syst Man Cybern","IEEE (SMC); SCJ; SICE; RSJ; JSME","IEEE, United States","4","","IV-194 - IV-199","1999","","1999","English","08843627","","","","10.1109/ICSMC.1999.812399","","1999 IEEE International Conference on Systems, Man, and Cybernetics 'Human Communication and Cybernetics'","October 12, 1999 - October 15, 1999","Tokyo, Jpn","56750","PICYE3","Conference article (CA)","In this paper we propose a software visualization tool named Software Visualization Supporting Space (SVSS) utilizing three-dimensional (3D) graphics in order to detect and analyze software faults in a large-scale distributed system. When a failure occurs in a software testing process, it is necessary for fault detection to inspect a large number of software processes from various viewpoints. 3D graphical representations allow a greater quantity of data as well as complex structures and relationships between components to be displayed on the screen effectively. SVSS can analyze the source code regularly to generate structural data of the target software. Moreover, it can also analyze the behavior of the processes using trace data obtained automatically by embedding a trace data acquisition function in the target machine. The results of these analysis functions can be visualized collectively on a common display so that the developer can trace execution flows and static connections simultaneously. The work reduction ratio using SVSS was estimated by sampling faults that had occurred in practical development of a distributed power control system.","","11","Computer aided software engineering","Computer software - Data acquisition - Distributed parameter control systems - Electric current control - Electric power systems - Reliability - Three dimensional computer graphics","Distributed power control system - Software fault analysis - Software visualization supporting space","706.1 Electric Power Systems - 723.1 Computer Programming - 723.2 Data Processing and Image Processing - 723.5 Computer Applications - 731.1 Control Systems - 731.3 Specific Variables Control","Applications (APP); Theoretical (THR); Experimental (EXP)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"The Solid* toolset for software visual analytics of program structure and metrics comprehension: From research prototype to product","20134316879598","Reniers, Dennie (1); Voinea, Lucian (1); Ersoy, Ozan (2); Telea, Alexandru (2) ","(1) SolidSource BV, Eindhoven, Netherlands (2) Institute Johann Bernoulli, University of Groningen, Netherlands ","Telea, A.(a.c.telea@rug.nl) ","","Science of Computer Programming","Sci Comput Program","","Elsevier, P.O. Box 211, Amsterdam, 1000 AE, Netherlands","79","","224-240","January 1, 2014","","2014","English","01676423","","","","10.1016/j.scico.2012.05.002","","","","","","SCPGD4","Journal article (JA)","Software visual analytics (SVA) tools combine static program analysis and fact extraction with information visualization to support program comprehension. However, building efficient and effective SVA tools is highly challenging, as it involves extensive software development in program analysis, graphics, information visualization, and interaction. We present a SVA toolset for software maintenance, and detail two of its components which target software structure, metrics and code duplication. We illustrate the toolset's usage for constructing software visualizations with examples in education, research, and industrial contexts. We discuss the design evolution from research prototypes to integrated, scalable, and easy-to-use products, and present several guidelines for the development of efficient and effective SVA solutions. © 2011 Elsevier B.V. All rights reserved.","","93","Static analysis","Industrial research - Information analysis - Information systems - Software engineering - Tools - Visualization","Easy-to-use products - Information visualization - Program structures - Research prototype - Software structures - Software visualization - Static program analysis - Visual tools","603 Machine Tools - 605 Small Tools and Hardware - 723.1 Computer Programming - 901.3 Engineering Research - 902.1 Engineering Graphics - 903 Information Science",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Magnify - A new tool for software visualization","20140417229310","Bartoszuk, Cezary (1); Timoszuk, Grzegorz (1); Dabrowski, Robert (1); Stencel, Krzysztof (1) ","(1) Institute of Informatics, University of Warsaw, Banacha 2, Warsaw 02-097, Poland ","","","2013 Federated Conference on Computer Science and Information Systems, FedCSIS 2013","Fed. Conf. Comput. Sci. Inf. Syst., FedCSIS","Ministry of Science and Higher Eduction; Intel","IEEE Computer Society, 2001 L Street N.W., Suite 700, Washington, DC 20036-4928, United States","","","1485-1488","2013","2013 Federated Conference on Computer Science and Information Systems, FedCSIS 2013","2013","English","","","","9781467344715","","6644213","2013 Federated Conference on Computer Science and Information Systems, FedCSIS 2013","September 8, 2013 - September 11, 2013","Krakow, Poland","102014","","Conference article (CA)","Modern software systems are inherently complex. Their maintenance is hardly possible without precise up-to-date documentation. It is often tricky to document dependencies among software components by only looking at the raw source code. We address these issues by researching new software analysis and visualization tools. In this paper we focus on software visualisation. Magnify is our new tool that performs static analysis and visualization of software. It parses the source code, identifies dependencies between code units and records all the collected information in a repository based on a language-independent graph-based data model. Nodes of the graph correspond to program entities of disparate granularity: methods, classes, packages etc. Edges represent dependencies and hierarchical structure. We use colours to reflect the quality, sizes to display the importance of artefacts, density of connections to portray the coupling. This kind of visualization gives bird's-eye view of the source code. It is always up to date, since the tool generates it automatically from the current revision of software. In this paper we discuss the design of the tool and present visualizations of sample open-source Java projects of various sizes. © 2013 Polish Information Processing Society.","","20","Static analysis","Computer programming languages - Computer science - Information systems - Tools - Visualization","Bird's eye view - Hierarchical structures - Software analysis - Software component - Software systems - Software visualisation - Software visualization - Visualization tools","903.2 Information Dissemination - 902.1 Engineering Graphics - 723 Computer Software, Data Handling and Applications - 722 Computer Systems and Equipment - 721 Computer Circuits and Logic Elements - 605 Small Tools and Hardware - 603 Machine Tools",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Visualization tools for understanding a complex code from a real application","20133816744997","Campos, Fernanda (1); Cortazar, Esteban (1); Eterovic, Yadran (1); Ramirez, Leonardo (2); Tejos, Cristian (2); Irarrazaval, Pablo (2) ","(1) Department of Computer Science, Pontificia Universidad Católica de Chile, Chile (2) Department of Electrical Engineering, Biomedical Imaging Center, Pontificia Universidad Católica de Chile, Chile ","","","22nd International Conference on Computer Applications in Industry and Engineering 2009, CAINE 2009","Int. Conf. Comput. Appl. Ind. Eng., CAINE","","International Society for Computers and Their Applications, 975 Walnut Street, Suite 132, 27511-4216, United States","","","284-291","2009","22nd International Conference on Computer Applications in Industry and Engineering 2009, CAINE 2009","2009","English","","","","9781615676668","","","22nd International Conference on Computer Applications in Industry and Engineering 2009, CAINE 2009","November 4, 2009 - November 6, 2009","San Francisco, CA, United states","99060","","Conference article (CA)","Research in Magnetic Resonance Imaging (MRI) requires researchers to make changes to the software that controls the scanner. Thus, the first challenge faced by MRI researchers is to understand the scanner's code to find the places where the changes must be made, and to make sure that the changes will not produce undesired effects in other parts of the code. At the Biomedical Imaging Center at Pontificia Universidad Cato´lica de Chile, we have been developing visualization tools for analysing the Philips scanner's code, and for storing and sharing the know-how thus acquired. We devised the tools to help MRI researchers identify the code's main concerns and understand how these concerns are represented and handled within the code. In this paper we report on the tools' functionalities; e.g., finding the places where each object or function is used, analyzing relationships among objects, storing comments to objects and functions, identifying which functions are executed and in which order, representing this information as a tree, searching this tree for a given function, and highlighting the differences between the trees representing two different executions. Initial tests show that these tools effectively support MRI researchers in their task of understanding the scanner's code.","","11","Tools","Computer applications - Forestry - Magnetic resonance imaging - Medical imaging - Research - Scanning - Technology transfer - Visualization","Biomedical imaging - Code analysis - Complex codes - Philips - Program comprehension - Real applications - Static code analysis - Visualization tools","901.4 Impact of Technology on Society - 901.3 Engineering Research - 821.0 Woodlands and Forestry - 746 Imaging Techniques - 902.1 Engineering Graphics - 741.3 Optical Devices and Systems - 723.5 Computer Applications - 605 Small Tools and Hardware - 603 Machine Tools - 741 Light, Optics and Optical Devices",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"A combined software reconnaissance & static analysis eclipse visualisation plug-in","20134416933908","Cleary, Brendan (1); Le Gear, Andrew (1); Exton, Chris (1); Buckley, Jim (1) ","(1) Department of Computer Science and Information Systems, University of Limerick, Ireland ","","","Proceedings - VISSOFT 2005: 3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis","Proc. - VISSOFT: IEEE Int. Workshop Vis. Softw. Underst. Analy.","IEEE Computer Society","IEEE Computer Society, 10662 Los Vaqueros Circle - P.O. Box 3014, Los Alamitos, CA 90720-1314, United States","","","121-122","2005","Proceedings - VISSOFT 2005: 3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis","2005","English","","","0780395409","9780780395404","10.1109/VISSOF.2005.1684319","1684319","3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis, VISSOFT 2005","September 25, 2005 - September 25, 2005","Budapest, Hungary","100371","","Conference article (CA)","Software reconnaissance is a dynamic analysis technique which can aid in the mapping between program features and code that implements those features. In a previous case study we have shown how we were able to combine software reconnaissance with a static data analysis to a derive reuse perspective from an existing system. In this paper we report on the tool support, in the form of an eclipse plug-in, developed to aid in visualising the results of the combined dynamic and static analyses. © 2005 IEEE.","","7","Static analysis","Computer software reusability","Dynamic analysis techniques - Existing systems - Plug-ins - Software reconnaissance - Tool support","723 Computer Software, Data Handling and Applications",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Software visualization in software maintenance, reverse engineering, and re-engineering: A research survey","2003227481412","Koschke, Rainer (1) ","(1) Institut fur Softwaretechnologie, Universität Stuttgart, Breitwiesenstrasse 20-22, 70565 Stuttgart, Germany ","Koschke, R.(koschke@informatik.uni-stuttgart.de) ","","Journal of Software Maintenance and Evolution","J. Software Maint. Evol.","","John Wiley and Sons Ltd","15","2","87-109","March/April 2003","","2003","English","1532060X","","","","10.1002/smr.270","","","","","","JSMECT","Journal article (JA)","Software visualization is concerned with the static visualization as well as the animation of software artifacts, such as source code, executable programs, and the data they manipulate, and their attributes, such as size, complexity, or dependencies. Software visualization techniques are widely used in the areas of software maintenance, reverse engineering, and re-engineering, where typically large amounts of complex data need to be understood and a high degree of interaction between software engineers and automatic analyses is required. This paper reports the results of a survey on the perspectives of 82 researchers in software maintenance, reverse engineering, and re-engineering on software visualization. It describes to which degree the researchers are involved in software visualization themselves, what is visualized and how, whether animation is frequently used, whether the researchers believe animation is useful at all, which automatic graph layouts are used if at all, whether the layout algorithms have deficiencies, and - last but not least - where the medium-term and long-term research in software visualization should be directed. The results of this survey help to ascertain the current role of software visualization in software engineering from the perspective of researchers in these domains and give hints on future research avenues.","","24","Computer software maintenance","Algorithms - Animation - Automatic testing - Computational complexity - Human computer interaction - Reengineering - Reverse engineering - Visualization","Automatic analysis - Software visualization","721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 722.2 Computer Peripheral Equipment - 723.1 Computer Programming - 723.5 Computer Applications - 913.3 Quality Assurance and Control","General review (GEN)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"An Eclipse plug-in for the detection of design pattern instances through static and dynamic analysis","20105113494566","De Lucia, Andrea (1); Deufemia, Vincenzo (1); Gravino, Carmine (1); Risi, Michele (1) ","(1) Dipartimento di Matematica e Informatica, Università degli studi di Salerno, Fisciano(SA), Italy ","De Lucia, A.(adelucia@unisa.it) ","","IEEE International Conference on Software Maintenance, ICSM","IEEE Int. Conf. Softw. Maint. ICSM","IEEE Computer Society; ACI Worldwide; Microsoft; IBM; Alcatel-Lucent","IEEE Computer Society, 10662 Los Vaqueros Circle - P.O. Box 3014, Los Alamitos, CA 90720-1314, United States","","","","2010","Proceedings - 2010 IEEE International Conference on Software Maintenance, ICSM 2010","2010","English","","","","9781424486298","10.1109/ICSM.2010.5609707","5609707","2010 IEEE International Conference on Software Maintenance, ICSM 2010","September 12, 2010 - September 18, 2010","Timisoara, Romania","82750","","Conference article (CA)","The extraction of design pattern information from software systems can provide conspicuous insight to software engineers on the software structure and its internal charactzeristics. In this demonstration we present ePAD, an Eclipse plug-in for recovering design pattern instances from object-oriented source code. The tool is able to recover design pattern instances through a structural analysis performed on a data model extracted from source code, and a behavioral analysis performed through the instrumentation and the monitoring of the software system. ePAD is fully configurable since it allows software engineers to customize the design pattern recovery rules and the layout used for the visualization of the recovered instances. © 2010 IEEE.","","22","Computer software maintenance","Behavioral research - Computer software - Dynamic analysis - Engineers - Mathematical models - Recovery - Reverse engineering - Structural analysis - Visualization","Behavioral analysis - Configurable - Data models - Design pattern recovery - Design Patterns - Eclipse plug-in - Object oriented - Plug-ins - Software engineers - Software structures - Software systems - Source code analysis - Source codes - Static and dynamic analysis","921 Mathematics - 912.4 Personnel - 902.1 Engineering Graphics - 971 Social Sciences - 723 Computer Software, Data Handling and Applications - 422.2 Strength of Building Materials : Test Methods - 408.1 Structural Design, General - 531 Metallurgy and Metallography",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"A lightweight visualization of interprocedural data-flow paths for source code reading","20123415352805","Ishio, Takashi (1); Etsuda, Shogo (1); Inoue, Katsuro (1) ","(1) Graduate School of Information Science and Technology, Osaka University, 1-5 Yamadaoka, Suita, Osaka, Japan ","Ishio, T.(ishio@ist.osaka-u.ac.jp) ","","IEEE International Conference on Program Comprehension","IEEE Int. Conf. Program Comprehension","IEEE; IEEE Computer Society; Technical Council on Software Engineering (TCSE)","IEEE Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","37-46","2012","2012 20th IEEE International Conference on Program Comprehension, ICPC 2012 - Proceedings","2012","English","","","","9781467312165","","6240506","2012 20th IEEE International Conference on Program Comprehension, ICPC 2012","June 11, 2012 - June 13, 2012","Passau, Germany","91930","","Conference article (CA)","To understand the behavior of a program, developers must read source code fragments in various modules. For developers investigating data-flow paths among modules, a call graph is too abstract since it does not visualize how parameters of method calls are related to each other. On the other hand, a system dependence graph is too fine-grained to investigate interprocedural data-flow paths. In this research, we propose an intermediate-level of visualization; we visualize interprocedural data-flow paths among method parameters and fields with summarized intraprocedural data-flow paths. We have implemented our visualization as an Eclipse plug-in for Java. The tool comprises a lightweight data-flow analysis and an interactive graph viewer using fractal value to extract a small subgraph of data-flow related to variables specified by a developer. A case study has shown our visualization enabled developers to investigate more data-flow paths in a fixed time slot. In addition, we report our lightweight data-flow analysis can generate precise data-flow paths for 98% of Java methods. © 2012 IEEE.","","23","Visualization","Computer aided language translation - Computer architecture - Static analysis","Call graphs - Dataflow - Fixed time - Inter-procedural - Java methods - Plug-ins - Program comprehension - Software visualization - Source codes - Subgraphs - System dependence graph","722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 902.1 Engineering Graphics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Using static code analysis tools to increase source code maintainability","20141117444364","Novak, J. (1); Hericko, M. (1) ","(1) University of Maribor, Smetanova ul. 17, 2000 Maribor, Croatia ","","","MIPRO 2009 - 32nd International Convention Proceedings: Telecommunications and Information","MIPRO 2009 - 32nd Intl. Convention Proc.: Telecom. Info.","Croatian Electricity Company (HEP); Ericsson Nikola Tesla, Croatia; et al; Siemens, Croatia; T-Croatian Telecom; VIPnet, Croatia","Croatian Society for Information and Communication Technology","2","","145-148","2009","MIPRO 2009 - 32nd International Convention Proceedings: Telecommunications and Information","2009","English","","","","","","","32nd International Convention Proceedings: Microelectronics, Electronics and Electronic Technology, MEET and Grid and Visualizations Systems, GVS","May 25, 2009 - May 29, 2009","Opatija, Croatia","103045","","Conference article (CA)","There are a lot of static code analysis tools to automatically find program faults. These tools can analyze software without actually executing the programs. Code analysis tools can play an essential role in creating secure and reliable software. They can help catch common coding mistakes such as buffer overflow, cross-site scripting, Structured Query Language (SQL) injections, and a variety of race conditions. They also can help write code which is easier to maintain. The purpose of this paper is to present tools for static code analysis on C# language and how can be these tools used to help write more maintainable code. In experimental part we evaluate code before and after use of tools with maintainability index defined by Oman and Hagemeister.","","9","Tools","Maintainability - Microelectronics - Query languages","Buffer overflows - Code analysis - Cross site scripting - Source codes - Static code analysis - Static code analysis tools - Structured query languages","603 Machine Tools - 605 Small Tools and Hardware - 713 Electronic Circuits - 714 Electronic Components and Tubes - 723.3 Database Systems - 913.5 Maintenance",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Animated visualization of software history using evolution storyboards","20074110855449","Beyer, Dirk (1); Hassan, Ahmed E. (2) ","(1) EPFL, Switzerland (2) University of Victoria, Canada ","Beyer, D. ","","Proceedings - Working Conference on Reverse Engineering, WCRE","Proc. Working Conf. Rev. Eng. WCRE","","IEEE Computer Society, 10662 Los Vaqueros Circle - P.O. Box 3014, Los Alamitos, CA 90720-1314, United States","","","199-208","2006","Proceedings - 13th Working Conference on Reverse Engineering, WCRE 2006","2006","English","10951350","","0769527191","9780769527192","10.1109/WCRE.2006.14","4023990","13th Working Conference on Reverse Engineering, WCRE 2006","October 23, 2006 - October 27, 2006","Benevento, Italy","70335","","Conference article (CA)","The understanding of the structure of a software system can be improved by analyzing the system's evolution during development. Visualizations of software history that provide only static views do not capture the dynamic nature of software evolution. We present a new visualization technique, the Evolution Storyboard, which provides dynamic views of the evolution of a software's structure. An evolution storyboard consists of a sequence of animated panels, which highlight the structural changes in the system; one panel for each considered time period. Using storyboards, engineers can spot good design, signs of structural decay, or the spread of cross cutting concerns in the code. We implemented our concepts in a tool, which automatically extracts software dependency graphs from version control repositories and computes storyboards based on panels for different time periods. For applying our approach in practice, we provide a step by step guide that others can follow along the storyboard visualizations, in order to study the evolution of large systems. We have applied our method to several large open source software systems. In this paper, we demonstrate that our method provides additional information (compared to static views) on the ArgoUML project, an open source UML modeling tool. © 2006 IEEE.","","17","Software architecture","Animation - Information analysis - Static analysis - Unified Modeling Language","Dependency graphs - Evolution Storyboard - Open source software - Software's structure","723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.5 Computer Applications - 903.1 Information Sources and Analysis","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Proceedings of the 1998 ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering","1998444372518","",,"","Anon ","ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering","ACM SIGPLAN SIGSOFT Workshop Program Anal Software Tools Eng","ACM","ACM, New York, NY, United States","","","","1998","","1998","English","","","","","","","Proceedings of the 1998 ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering","June 16, 1998 - June 16, 1998","Montreal, Can","48941","00310Z","Conference proceeding (CP)","The proceedings contains 11 papers from the ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering: Topics discussed include: experiments with combined analysis for pointer aliasing; OPTVIEW approach to examine optimized code; memory error detection via static point analysis; static slicing of threaded programs; recovering software architecture from multiple source code analysis; composite data flow analysis applied to concurrent programs; software visualization in desert environment; lightweight architecture for program execution monitoring; performance visualization of higher-order programs; and program spectra.","",,"Computer aided software engineering","C (programming language) - Computer architecture - Computer software maintenance - Computer software selection and evaluation - Data flow analysis - Data storage equipment - Data structures - Interfaces (computer) - Large scale systems - Legacy systems - Program compilers - Program debugging","EiRev - Galois connection - Legacy code modularization - Multiple source code analysis - Pointer aliasing - Program profiling - Software package ManSART - Software package OPTVIEW - Static pointer analysis - Static program slicing","722.1 Data Storage, Equipment and Techniques - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.2 Data Processing and Image Processing - 723.5 Computer Applications","General review (GEN); Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Case study: Visual analytics in software product assessments","20100212626167","Telea, Alexandru (1); Voinea, Lucian (2) ","(1) Institute for Math. and Computer Science, University of Groningen, Netherlands (2) SolidSource BV, Eindhoven, Netherlands ","Telea, A.(a.c.telea@rug.nl) ","","Proceedings of VISSOFT 2009 - 5th IEEE International Workshop on Visualizing Software for Understanding and Analysis","Proc. VISSOFT - IEEE Int. Workshop Vis. Softw. Underst. Anal.","IEEE Computer Society; IEEE Computer Society Technical; Council on Software Engineering (TCSE)","IEEE Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","65-72","2009","Proceedings of VISSOFT 2009 - 5th IEEE International Workshop on Visualizing Software for Understanding and Analysis","2009","English","","","","9781424450251","10.1109/VISSOF.2009.5336417","5336417","VISSOFT 2009 - 5th IEEE International Workshop on Visualizing Software for Understanding and Analysis","September 25, 2009 - September 25, 2009","Edmonton, AB, Canada","78826","","Conference article (CA)","We present how a combination of static source code analysis, repository analysis, and visualization techniques has been used to effectively get and communicate insight in the development and project management problems of a large industrial code base. This study is an example of how visual analytics can be effectively applied to answer maintenance questions and support decision making in the software industry. We comment on the relevant findings during the study both in terms of used technique and applied methodology and outline the favorable factors that were essential in making this type of assessment successful within tight time and budget constraints. ©2009 IEEE.","","18","Project management","Computer software - Computer software maintenance - Visualization","Budget constraint - Industrial codes - Software industry - Software products - Static sources - Visual analytics - Visualization technique","723 Computer Software, Data Handling and Applications - 902.1 Engineering Graphics - 912.2 Management",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Visual exploration of function call graphs for feature location in complex software systems","20074910956193","Bohnet, Johannes (1); Döllner, Jürgen (1) ","(1) University of Potsdam, Hasso-Plattner-Institute, Prof.-Dr.-Helmert-Str. 2-3, 14482 Potsdam, Germany ","Bohnet, J.(bohnet@hpi.uni-potsdam.de) ","","Proceedings - SOFTVIS 06: ACM Symposium on Software Visualization","Proc. ACM Symp. Softw. Vis.","ACM SIG on Computer Graphics and Interactive Techniques, SIGGRAPH; ACM Special Interest Group on Software Engineering, SIGSOFT; ACM Special Interest Group on Computer-Human Interaction, SIGCHI; ACM Special Interest Group on Programming Languages, SIGPLAN","Association for Computing Machinery, 1515 Broadway, 17th Floor, New York, NY 10036-5701, United States","","","95-104","2006","Proceedings - SOFTVIS 06: ACM Symposium on Software Visualization","2006","English","","","1595934642","9781595934642","10.1145/1148493.1148508","","SOFTVIS 06: ACM Symposium on Software Visualization","September 4, 2006 - September 5, 2006","Brighton, United kingdom","70656","","Conference article (CA)","Maintenance, reengineering, and refactoring processes of software systems are typically driven and organized in terms of features. Feature change requests need to be translated into changes in source code, which is a highly cost intensive and time consuming task when complex legacy software systems are concerned; their documentation is likely to be outdated and incomplete. In this paper, we propose a prototype tool that supports users in locating and understanding feature implementation in large (>1 MLOC) C/C++ systems. A combination of static and dynamic analysis allows extracting of the function call graph during feature execution and interpreting it within the static architecture of the system. An interactive multi-view visualization enables users to explore that graph. An effective 2 1/2D visualization provides various visual cues that facilitate finding those paths in the function call graph that are essential for understanding feature functionality. Additionally to source code aspects, the dynamic metric of function execution times is exploited, which gives significant hints to feature-implementing functions. Furthermore, information on functions is extended by architectural aspects, thereby supporting users in remaining oriented during their analysis and exploration task as they can give priority to selected architectural components and thereby hide insignificant function calls. © 2006 by the Association for Computing Machinery, Inc.","","32","Computer software","Computer architecture - Dynamic analysis - Graph theory - Object oriented programming - Program documentation - Reverse engineering","Complex software systems - Feature analysis - Feature location - Program comprehensions - Software visualization - Source codes - Static architecture - Time consuming tasks","422.2 Strength of Building Materials : Test Methods - 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 921.4 Combinatorial Mathematics, Includes Graph Theory, Set Theory","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Static analysis of programs with graphical user interface","20073310759002","Staiger, Stefan (1) ","(1) Institute of Software Technology, University of Stuttgart ","Staiger, S.(staiger@informatik.uni-stuttgart.de) ","","Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR","Proc. Eur. Conf. Software Maint. Reeng.","","Inst. of Elec. and Elec. Eng. Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","252-261","2007","Proceedings - CSMR 2007: 11th European Conference on Software Maintenance and Reengineering - Software Evolution in Complex Software Intensive Systems","2007","English","15345351","","","","10.1109/CSMR.2007.44","4145043","CSMR 2007: 11th European Conference on Software Maintenance and Reengineering","March 21, 2007 - March 23, 2007","Amsterdam, Netherlands","70042","","Conference article (CA)","We describe a new approach for statically analyzing programs which have a graphical user interface (GUI). Our analysis detects the parts of the program which belong to the GUI, it detects widgets and hierarchies they form, and it shows the event handlers connected to events of those widgets. Besides supporting general program understanding, we show that this also supports control-flow analysis, architecture recovery, migration to GUI builders and mapping the visual appearance of the program to source code arte-facts. Our tests indicate that the static analysis we propose is fast and useful. © 2007 IEEE.","","23","Computer programming","Graphical user interfaces - Software architecture - Static analysis","Control flow analysis - Source code","722.2 Computer Peripheral Equipment - 723.1 Computer Programming - 723.5 Computer Applications","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Detecting security vulnerabilities with software architecture analysis tools","20083911604288","Karppinen, Kaarina (1); Lindvall, Mikael (2); Yonkwa, Lyly (2) ","(1) VTT Technical Research Centre of Finland (2) FC-MD Fraunhofer Center for Experimental Software Engineering Maryland ","Karppinen, K.(kaarina.karppinen@vtt.fi) ","","2008 IEEE International Conference on Software Testing Verification and Validation Workshop, ICSTW'08","IEEE Int. Conf. Softw. Test. Verif. Validation Workshop, ICSTW","","Inst. of Elec. and Elec. Eng. Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","262-268","2008","2008 IEEE International Conference on Software Testing Verification and Validation Workshop, ICSTW'08","2008","English","","","0769533884","9780769533889","10.1109/ICSTW.2008.14","4567018","2008 IEEE International Conference on Software Testing Verification and Validation Workshop, ICSTW'08","April 9, 2008 - April 11, 2008","Lillehammer, TBD, Norway","73489","","Conference article (CA)","Hidden functionality in software is a big problem, because we cannot be sure that the software does not contain malicious code. We conducted an experiment where we studied the relationship between architecture constructs, dynamic behavior and security vulnerabilities. We also studied to what extent architecture analysis tools can assist in detecting security vulnerabilities that are caused by architecture violations. Using the tool, we were able to capture the dynamic pattern of a user breaking in to the system using the back door. Based on the dynamic information in combination with the static information, we obtained a good picture of the 'visual image' of the back door. Such 'visual images' can be used to detect vulnerabilities and ultimately help to design software architectures that meet their security requirements. © 2008 IEEE.","","9","Software architecture","Architecture - Codes (symbols) - Computer software selection and evaluation - Doors - Software design - Software testing - Verification","Architecture analysis - Design softwares - Dynamic behaviors - Dynamic information - International conferences - Malicious code - Security requirements - Security vulnerabilities - Software architecture analysis - Static information - Verification and validation - Visual imaging","402 Buildings and Towers - 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.2 Data Processing and Image Processing - 723.5 Computer Applications",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Projecting code changes onto execution traces to support localization of recently introduced bugs","20100112605409","Bohnet, Johannes (1); Voigt, Stefan (1); Döllner, Jürgen (1) ","(1) Hasso-Plattner-Institute, University of Potsdam, Germany ","Bohnet, J.(bohnet@hpi.uni-potsdam.de) ","","Proceedings of the ACM Symposium on Applied Computing","Proc ACM Symp Appl Computing","ACM SIGAPP","Association for Computing Machinery, 1515 Broadway, 17th Floor, New York, NY 10036-5701, United States","","","438-442","2009","24th Annual ACM Symposium on Applied Computing, SAC 2009","2009","English","","","","9781605581668","10.1145/1529282.1529378","","24th Annual ACM Symposium on Applied Computing, SAC 2009","March 8, 2009 - March 12, 2009","Honolulu, HI, United states","78664","","Conference article (CA)","Working collaboratively on complex software systems often leads to situations where a developer enhances or extends system functionality, thereby however, introducing bugs. At best the unintentional changes are caught immediately by regression tests. Often however, the bugs are detected days or weeks later by other developers noticing strange system behavior while working on different parts of the system. Then it is a highly time-consuming task to trace back this behavior change to code changes in the past. In this paper we propose a technique for identifying the recently introduced change that is responsible for the unexpected behavior. The key idea is to combine dynamic, static, and code change information on the system to reduce the possibly great amount of code modifications to those that may affect the system while running its faulty behavior. After having applied this massive automated filtering step, developers receive support in semi-automatically identifying the root cause change by means of a trace exploration frontend. Within multiple synchronized views, developers explore when, how and why modified code locations are executed. The technique is implemented within a prototypical analysis tool that copes with large (> MLOC) C/C++ software systems. We demonstrate the approach by means of industrial case studies. Copyright 2009 ACM.","","14","Program debugging","Computer science - Computer software - Dynamic analysis - Visualization","Analysis tools - Behavior change - Code changes - Code modifications - Complex software systems - Execution trace - Fault localization - Industrial case study - Regression tests - Root cause - Software systems - Software visualization - System behaviors - System functionality - Time-consuming tasks - Trace exploration","422.2 Strength of Building Materials : Test Methods - 721 Computer Circuits and Logic Elements - 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 902.1 Engineering Graphics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Behavioral pattern identification through visual language parsing and code instrumentation","20092812185337","De Lucia, Andrea (1); Deufemia, Vincenzo (1); Gravino, Carmine (1); Risi, Michele (1) ","(1) Dipartimento di Matematica e Informatica, Università di Salerno, 84084 Fisciano, SA, Italy ","De Lucia, A.(adelucia@unisa.it) ","","Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR","Proc. Eur. Conf. Software Maint. Reeng.","Reengineering Forum, REF","Inst. of Elec. and Elec. Eng. Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","99-108","2009","Proceedings - 13th European Conference on Software Maintenance and Reengineering, CSMR 2009","2009","English","15345351","","","9780769535890","10.1109/CSMR.2009.29","4812743","13th European Conference on Software Maintenance and Reengineering, CSMR 2009","March 24, 2009 - March 27, 2009","Kaiserslautern, Germany","76983","","Conference article (CA)","In this paper we present a new technique able to recover behavioral design pattern instances which combines static analysis, based on visual language parsing, with dynamic analysis, based on source code instrumentation. In particular, the dynamic analysis is performed through the automatic instrumentation of the method calls involved in the candidate pattern instances identified during static analysis. The results obtained from a program monitoring activity are matched against the definitions of the pattern behaviors expressed in terms of monitoring grammars. We also present and discuss the results of a case study on JHotDraw 5.1 software library performed to assess the retrieval effectiveness of the proposed approach. © 2009 IEEE.","","32","Dynamic analysis","Computer software - Computer software maintenance - Instruments - Linguistics - Static analysis","Behavioral patterns - Candidate patterns - Code instrumentation - Design Pattern - Program monitoring - Retrieval effectiveness - Software libraries - Source Code Instrumentation - Visual language parsing","944 Moisture, Pressure and Temperature, and Radiation Measuring Instruments - 943 Mechanical and Miscellaneous Measuring Instruments - 942 Electric and Electronic Measuring Instruments - 941 Acoustical and Optical Measuring Instruments - 903.2 Information Dissemination - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 422.2 Strength of Building Materials : Test Methods",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Characterising, explaining, and exploiting the approximate nature of static analysis through animation","20074110855792","Binkley, David (1); Harman, Mark (2); Krinke, Jens (3) ","(1) Loyola College, Baltimore, MD 21210-2699, United States (2) King's College London, Strand, London WC2R 2LS, United Kingdom (3) FernUniversität in Hagen, 58084 Hagen, Germany ","Binkley, D. ","","Proceedings - Sixth IEEE International Workshop on Source Code Analysis and Manipulation, SCAM 2006","Proc. Sixth IEEE Int. Workshop Source Code Anal. Manip.","IEEE Computer Society Technical Council on Software Engineering; King's College London; Analysis, Slicing and Transformation Research Network (ASTReNet); RainCode; Villanova University","Inst. of Elec. and Elec. Eng. Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","43-52","2006","Proceedings - Sixth IEEE International Workshop on Source Code Analysis and Manipulation, SCAM 2006","2006","English","","","0769523536","9780769523538","10.1109/SCAM.2006.7","4026854","6th IEEE International Workshop on Source Code Analysis and Manipulation, SCAM 2006","September 27, 2006 - September 29, 2006","Philadelphia, PA, United states","70341","","Conference article (CA)","This paper addresses the question: 'How can animated visualisation be used to express interesting properties of static analysis?' The particular focus is upon static dependence analysis, but the approach adopted in the paper is applicable to other forms of static analysis. The challenge is twofold. First, there is the inherent difficultly of using animation, which is inherently dynamic, as a representation of static analysis, which is not. The paper shows one way in which this apparent contradiction can be overcome. Second, there is the harder challenge of ensuring that the animations so-produced correspond to features of genuine interest in the source code that are hard to visualize without animation. To address these two challenges the paper shows how properties of static dependence analysis can be formulated in a manner suitable for animated visualisation. These formulations of dependence have been implemented and the results used to provide dependence visualisations of the structure of a set of C programs. All animations described in the paper are also viewable on-line. © 2006 IEEE.","","44","Computer programming languages","Animation - Approximation theory - Static analysis","Source code - Static dependence analysis","723.1.1 Computer Programming Languages - 723.5 Computer Applications - 921.6 Numerical Methods","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Detecting defects with an interactive code review tool based on visualisation and machine learning","20104613377658","Axelsson, Stefan (1); Baca, Dejan (1); Feldt, Robert (1); Sidlauskas, Darius (1); Kacan, Denis (1) ","(1) Blekinge Institute of Technology, Sweden ","Axelsson, S.(stefan.axelsson@bth.se) ","","Proceedings of the 21st International Conference on Software Engineering and Knowledge Engineering, SEKE 2009","Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE","Knowledge Systems Institute Graduate School","Unavailable, United Kingdom","","","412-417","2009","Proceedings of the 21st International Conference on Software Engineering and Knowledge Engineering, SEKE 2009","2009","English","","","1891706241","9781891706240","","","21st International Conference on Software Engineering and Knowledge Engineering, SEKE 2009","July 1, 2009 - July 3, 2009","Boston, MA, United states","82289","","Conference article (CA)","Code review is often suggested as a means of improving code quality. Since humans are poor at repetitive tasks, some form of tool support is valuable. To that end we developed a prototype tool to illustrate the novel idea of applying machine learning (based on Normalised Compression Distance) to the problem of static analysis of source code. Since this tool learns by example, it is trivially programmer adaptable. As machine learning algorithms are notoriously difficult to understand operationally (they are opaque) we applied information visualisation to the results of the learner. In order to validate the approach we applied the prototype to source code from the open-source project Samba and from an industrial, telecom software system. Our results showed that the tool did indeed correctly find and classify problematic sections of code based on training examples.","","17","Learning algorithms","Codes (symbols) - Knowledge engineering - Learning systems - Software engineering - Static analysis - Visualization","Code quality - Code review - Machine learning algorithms - Machine-learning - Open source projects - Prototype tools - Repetitive task - Software systems - Source codes - TeleCOM - Tool support - Training example - Visualisation","723 Computer Software, Data Handling and Applications - 902.1 Engineering Graphics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Analyzing Java software by combining metrics and program visualization","2000205113315","Systa, Tarja (1); Yu, Ping (1); Muller, Hausi (1) ","(1) Tampere Univ of Technology, Tampere, Finland ","Systa, Tarja ","","Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR","Proc Eur Conf Software Maint Reeng","Reengineering Forum; IEEE Computer Society/TCSE; University of Zuric; IT-ieee","Institute of Electrical and Electronics Engineers Computer Society","","","199-208","2000","","2000","English","","","","","","","The 4th European Conference on Software Maintenance and Reegineering - CSMR 2000","February 29, 2000 - March 3, 2000","Zurich, Switz","56566","002575","Journal article (JA)","Shimba, a prototype reverse engineering environment, has been built to support the understanding of Java software. Shimba uses Rigi and SCED to analyze, visualize, and explore the static and dynamic aspects, respectively, of the subject system. The static software artifacts and their dependencies are extracted from Java byte code and viewed as directed graphs using the Rigi reverse engineering environment. The static dependency graphs of a subject system can be annotated with attributes, such as software quality measures, and then be analyzed and visualized using scripts through the end-user programmable interface. Shimba has recently been extended with the Chidamber and Kemerer suite of object-oriented metrics. The metrics measure properties of the classes, the inheritance hierarchy, and the interaction among classes of a subject system. Since Shimba is primarily intended for the analysis and exploration of Java software, the metrics have been tailored to measure properties of software components written in Java. We show how these metrics can be applied in the context of understanding software systems using a reverse engineering environment. The static dependency graphs of the system under investigation are decorated with measures obtained by applying the object-oriented metrics to selected software components. Shimba provides tools to examine these measures, to find software artifacts that have values that are in a given range, and to detect correlations among different measures. The object-oriented analysis of the subject Java system can be investigated further by exporting the measures to a spreadsheet.","","25","Computer software selection and evaluation","Computer software maintenance - Interfaces (computer) - Java programming language - Object oriented programming - Reverse engineering","Object oriented metrics - Software package Java","722.2 Computer Peripheral Equipment - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.1.1 Computer Programming Languages","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"MOQA; unlocking the potential of compositional static average-case analysis","20095112552511","Schellekens, M.P. (1) ","(1) University College Cork, Department of Computer Science, Centre for Efficiency-Oriented Languages (CEOL), Ireland ","Schellekens, M.P.(m.schellekens@cs.ucc.ie) ","","Journal of Logic and Algebraic Programming","J. Logic. Algebraic Program.","","Elsevier Inc., 360 Park Avenue South, New York, NY 10010, United States","79","1","61-83","January 2010","","2010","English","15678326","","","","10.1016/j.jlap.2009.02.006","","","","","","JLAPAJ","Journal article (JA)","Compositionality is the 'golden key' to static analysis and plays a central role in static worst-case time analysis. We show that compositionality, combined with the capacity for tracking data distributions, unlocks a useful novel technique for average-case analysis. The applicability of the technique has been demonstrated via the static average-case analysis tool DISTRI. The tool automatically extracts average-case time from source code of programs implemented in the novel programming language MOQA1MOdular Quantitative Analysis.1. MOQA enables the prediction of the average number of basic steps performed in a computation, paving the way for static analysis of complexity measures such as average time or average power use. MOQA has as a unique feature a guaranteed average-case timing compositionality. The compositionality property brings a strong advantage for the programmer. The capacity to combine parts of code, where the average-time is simply the sum of the times of the parts, is a very helpful advantage in static analysis, something which is not available in current languages. Moreover, re-use is a key factor in the MOQA approach: once the average time is determined for a piece of code, then this time will hold in any context. Hence it can be re-used and the timing impact is always the same. Compositionality also improves precision of static average-case analysis, supporting the determination of accurate estimates on the average number of basic operations of MOQA programs. The MOQA 'language' essentially consists of a suite of data-structuring operations together with conditionals, for-loops and recursion. As such MOQA can be incorporated in any traditional programming language, importing all of its benefits in a familiar context2MOQA is implemented at CEOL in Java 5.0 as MOQA-java.2. Compositionality for average-case is subtle and one may easily be tempted to conclude that compositionality 'comes for free'. For genuine compositional reasoning however, one needs to be able to track data and their distribution throughout computations; a non-trivial problem. The lack of an efficient method to track distributions has plagued all prior static average-case analysis approaches. We show how MOQA enables the finitary representation and tracking of the distribution of data states throughout computations. This enables one to unlock the true potential of compositional reasoning. Links with reversible computing are discussed. The highly visual aspect of this novel and unified approach to the Analysis of Algorithms also has a pedagogical advantage, providing students with useful insights in the nature of algorithms and their analysis. © 2009 Elsevier Inc. All rights reserved.","","58","Java programming language","Algorithms - C (programming language) - Computational efficiency - Computer software - Linguistics - Query languages - Static analysis - Time measurement","Average-case analysis - Compositionality - Randomness preservation - Static power - Static power analysis - Static timing analysis","921 Mathematics - 903.2 Information Dissemination - 723.5 Computer Applications - 943.3 Special Purpose Instruments - 723.3 Database Systems - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 723.1.1 Computer Programming Languages",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Visualization of C++ template metaprograms","20104813441064","Borók-Nagy, Zoltán (1); Májer, Viktor (1); Mihalicza, József (1); Pataki, Norbert (1); Porkoláb, Zoltán (1) ","(1) Dept. of Programming Languages and Compilers, Eötvös Loránd University, Faculty of Informatics, Pazmany Peter Setany 1/C, H-1117 Budapest, Hungary ","Borók-Nagy, Z.(boroknagyz@gmail.com) ","","Proceedings - 10th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2010","Proc. - IEEE Int. Work. Conf. Source Code Anal. Manip., SCAM","IEEE Computer Society","Association for Computing Machinery, 1515 Broadway, 17th Floor, New York, NY 10036-5701, United States","","","167-176","2010","Proceedings - 10th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2010","2010","English","","","","9780769541785","10.1109/SCAM.2010.16","5601850","10th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2010","September 12, 2010 - September 13, 2010","Timisoara, Romania","82443","","Conference article (CA)","Template metaprograms have become an essential part of today's C++ programs: with proper template definitions we can force the C++ compiler to execute algorithms at compilation time. Among the application areas of template metaprograms are the expression templates, static interface checking, code optimization with adaptation, language em- bedding and active libraries. Despite all of its already proven benefits and numerous successful applications there are surprisingly few tools for creating, supporting, and ana- lyzing C++ template metaprograms. As metaprograms are executed at compilation time they are even harder to under- stand. In this paper we present a code visualization tool, which is utilizing Templight, our previously developed C++ template metaprogram debugger. Using the tool it is pos- sible to visualize the instantiation chain of C++ templates and follow the execution of metaprograms. Various presen- tation layers, filtering of template instances and step-by- step replay of the instantiations are supported. Our tool can help to test, optimize, maintain C++ template metapro- grams, and can enhance their acceptance in the software industry. © 2010 IEEE.","","28","Computer software","Optimization - Visualization","Application area - C++ templates - Code optimization - Code visualization - Debuggers - Expression templates - Metaprograms - Software industry - Step-by-step","723 Computer Software, Data Handling and Applications - 902.1 Engineering Graphics - 921.5 Optimization Techniques",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Computation and visualization of cause-effect paths","20134116837932","Dubey, Alpana (1); Murthy, Pvr (2) ","(1) Software Development Improvement Program ABB Ltd., Bangalore, India (2) Corporate Research Technologies Siemens, Bangalore, India ","","","2013 8th International Workshop on Automation of Software Test, AST 2013 - Proceedings","Int. Workshop Autom. Softw. Test, AST - Proc.","","IEEE Computer Society, 2001 L Street N.W., Suite 700, Washington, DC 20036-4928, United States","","","139-145","2013","2013 8th International Workshop on Automation of Software Test, AST 2013 - Proceedings","2013","English","","","","9781467361613","10.1109/IWAST.2013.6595805","6595805","2013 8th International Workshop on Automation of Software Test, AST 2013","May 18, 2013 - May 19, 2013","San Francisco, CA, United states","99768","","Conference article (CA)","Static analyzers detect possible run-time errors at compile-time and often employ data-flow analysis techniques to infer properties of programs. Usually, dataflow analysis tools report possible errors with line numbers in source code and leave the task of locating root causes of errors. This paper proposes a technique to aid developers in locating the root causes of statically identified run-time errors with the help of cause-effect paths. A cause effect path terminates at an erroneous statement and originates at the statement which is responsible for the error. We propose modifications to the classic data-flow analysis algorithm to compute cause-effect paths. We discuss different visualization modes in which cause-effect paths can be displayed. As a case study, we implemented a null pointer analyzer, with the additional capability of cause-effect path computation, using the Microsoft Phoenix framework. In addition, we propose a methodology to automatically generate an analyzer which computes cause-effect paths using a framework such as Microsoft Phoenix. © 2013 IEEE.","","17","Static analysis","Computer aided language translation - Computer debugging - Errors - Flow visualization - Software testing - Visualization","Cause-effect - Compile time - MicroSoft - Path computation - Root cause - Run-time errors - Source codes - Static analyzers","631.1 Fluid Flow, General - 722 Computer Systems and Equipment - 723.5 Computer Applications - 731 Automatic Control Principles and Applications - 902.1 Engineering Graphics - 921 Mathematics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Answering common questions about code","20111113736044","LaToza, Thomas D. (1) ","(1) Institute for Software Research, School of Computer Science, Carnegie Mellon University, 5000 Forbes Avenue, Pittsburgh, PA 15213, United States ","LaToza, T. D.(tlatoza@cs.cmu.edu) ","","Proceedings - International Conference on Software Engineering","Proc Int Conf Software Eng","Special Interest Group on Software Engineering (ACM SIGSOFT); IEEE Computer Society (IEEE CSE)","IEEE Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","983-986","2008","ICSE'08 Companion - Companion Material of the 30th International Conference on Software Engineering","2008","English","02705257","","","9781605580791","","","30th International Conference on Software Engineering, ICSE'08","May 10, 2008 - May 18, 2008","Leipzig, Germany","84070","PCSEDE","Conference article (CA)","Difficulties understanding update paths while understanding code cause developers to waste time and insert bugs. A detailed investigation of these difficulties suggests that a wide variety of problems could be addressed by more easily answering questions about update paths that existing tools do not answer. We are designing a feasible update path static analysis to compute these paths and a visualization for asking questions and displaying results. In addition to grounding the questions we answer and tailoring the program analysis in data, we will also evaluate the usefulness of our tool using lab and field studies.","","11","Static analysis","Navigation - Software engineering - Visualization","Callgraph - Code navigation - Empirical study - Feasible paths - Program comprehension - Science of design","716.3 Radio Systems and Equipment - 723.1 Computer Programming - 902.1 Engineering Graphics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Fast analysis of source code in C and C++","20130716009299","Savitskii, V.O. (1); Sidorov, D.V. (1) ","(1) Institute for System Programming, Russian Academy of Sciences, ul. Solzhenitsyna 25, Moscow, 109004, Russia ","Savitskii, V.O.(ssavitsky@ispras.ru) ","","Programming and Computer Software","Program. Comput. Softw.","","Maik Nauka-Interperiodica Publishing, Profsoyuznaya Ul. 90, Moscow, 117997, Russia","39","1","49-55","January 2013","","2013","English","03617688","","","","10.1134/S0361768813010064","","","","","","","Journal article (JA)","Static analysis is a popular tool for detecting the vulnerabilities that cannot be found by means of ordinary testing. The main problem in the development of static analyzers is their low speed. Methods for accelerating such analyzers are described, which include incremental analysis, lazy analysis, and header file caching. These methods make it possible to considerably accelerate the detection of defects and to integrate the static analysis tools in the development environment. As a result, defects in a file edited in the Visual Studio development environment can be detected in 0.5 s or faster, which means that they can be practically detected after each keystroke. Therefore, critical vulnerabilities can be detected and corrected at the stage of coding. © Pleiades Publishing, Ltd., 2013.","","8","Static analysis","Defects","Detection of defects - Development environment - Header files - Incremental analysis - Low speed - Source codes - Static analyzers - Visual studios","423 Non Mechanical Properties and Tests of Building Materials - 723.1 Computer Programming - 951 Materials Science",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Heapviz: Interactive heap visualization for program understanding and debugging","20132616455334","Kelley, Sean (1); Aftandilian, Edward (1); Gramazio, Connor (1); Ricci, Nathan (1); Su, Sara L. (1); Guyer, Samuel Z. (1) ","(1) Department of Computer Science, Tufts University, 161 College Ave., Medford, MA 02155, United States ","Guyer, S.Z.(sguyer@cs.tufts.edu) ","","Information Visualization","Inf. Visualization","","SAGE Publications Ltd, 55 City Road, London, EC1Y 1SP, United Kingdom","12","2","163-177","April 2013","Software Visualization","2013","English","14738716","14738724","","","10.1177/1473871612438786","","","","","","","Journal article (JA)","Understanding the data structures in a program is crucial to understanding how the program works, or why it does not work. Inspecting the code that implements the data structures, however, is an arduous task and often fails to yield insights into the global organization of a program's data. Inspecting the actual contents of the heap solves these problems but presents a significant challenge of its own: finding an effective way to present the enormous number of objects it contains. In this paper w e present Heapviz, a tool for visualizing and exploring snapshots of the heap obtained from a running Java program. Unlike existing tools, such as traditional debuggers, Heapviz presents a global view of the program state as a graph, together with powerful interactive capabilities for navigating it. Our tool employs several key techniques that help manage the scale of the data. First, we reduce the size and complexity of the graph by using algorithms inspired by static shape analysis to aggregate the nodes that make up a data structure. Second, we implement a powerful visualization component whose interactive interface provides extensive support for exploring the graph. The user can search for objects based on type, connectivity, and field values; group objects; and color or hide and show each group. The user may also inspect individual objects to see their field values and neighbors in the graph. These interactive abilities help the user manage the complexity of these huge graphs. By applying Heapviz to both constructed and real-world examples, we show that it provides programmers with a powerful and intuitive tool for exploring program behavior. © The Author(s) 2012.","","28","Data structures","Computer software - Inspection - Java programming language - Visualization","Force-directed layout - Graph visualization - Interactive visualizations - Program visualization - Software visualization","723 Computer Software, Data Handling and Applications - 902.1 Engineering Graphics - 913.3.1 Inspection",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Maintaining a COTS integrated solution - are traditional static analysis techniques sufficient for this new programming methodology?","1999140005538","Cherinka, R. (1); Overstreet, C.M. (1); Ricci, J. (1) ","(1) MITRE Corp, Hampton, United States ","Cherinka, R. ","","Conference on Software Maintenance","Conf Software Maint","IEEE","IEEE, Piscataway, NJ, United States","","","160-169","1998","","1998","English","","","","","","","Proceedings of the 1998 IEEE International Conference on Software Maintenance, ICSM","November 16, 1998 - November 20, 1998","Bethesda, MD, USA","49445","CSFMEB","Conference article (CA)","As integrating commercial off-the-shelf (COTS) products into new homogeneous systems replaces 'traditional' software development approaches, software maintenance problems persist. This approach builds new solutions via 'glue code' using visual languages, which tie together client-based office products, server-based 'BackOffice' products and web-based services/applications. The resulting collection of distributed object-oriented components are glued together by attaching code snippets written in a visual language to other components and controls, such as a command button on a form. A majority of the code in such an application is pre-generated and self-contained in the individual components being reused and, as a result, is typically difficult to understand and maintain. Our experience shows that, while these approaches actually exacerbate some maintenance problems, such as the introduction of dead code, traditional static analysis techniques may still facilitate common maintenance activities. This work reports on the use of data flow techniques on several medium-sized COTS integrated solutions that have become difficult to maintain. We found that by exploiting semantic information, traditional techniques can be augmented to handle some of the unique maintenance issues of component-based software.","","18","Software engineering","Client server computer systems - Computer programming - Computer programming languages - Computer software maintenance - Data flow analysis - Object oriented programming - World Wide Web","Commercial off the shelf products - Program understanding - Static analysis techniques","722.4 Digital Computers and Systems - 723.1 Computer Programming - 723.1.1 Computer Programming Languages","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Constellation visualization: Augmenting program dependence with dynamic information","20114814560326","Deng, Fang (1); DiGiuseppe, Nicholas (1); Jones, James A. (1) ","(1) Department of Informatics, University of California, Irvine, Irvine, CA 92617-3440, United States ","Deng, F.(fdeng@ics.uci.edu) ","","Proceedings of VISSOFT 2011 - 6th IEEE International Workshop on Visualizing Software for Understanding and Analysis","Proc. VISSOFT - IEEE Int. Workshop Vis. Softw. Underst. Anal.","IEEE Computer Society; IEEE Comput. Soc. Tech. Counc. Softw. Eng. (TCSE)","IEEE Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","","2011","Proceedings of VISSOFT 2011 - 6th IEEE International Workshop on Visualizing Software for Understanding and Analysis","2011","English","","","","9781457708237","10.1109/VISSOF.2011.6069453","6069453","6th IEEE International Workshop on Visualizing Software for Understanding and Analysis, VISSOFT 2011","September 29, 2011 - September 30, 2011","Williamsburg, VA, United states","87446","","Conference article (CA)","This paper presents a scalable, statement-level visualization that shows related code in a way that supports human interpretation of clustering and context. The visualization is applicable to many software-engineering tasks through the utilization and visualization of problem-specific meta-data. The visualization models statement-level code relations from a system-dependence- graph model of the program being visualized. Dynamic, run-time information is used to augment the static program model to further enable visual cluster identification and interpretation. In addition, we performed a user study of our visualization on an example program domain. The results of the study show that our new visualization successfully revealed relevant context to the programmer participants. © 2011 IEEE.","","15","Data visualization","Codes (symbols) - Visualization","Dynamic information - Graph model - Identification and Interpretation - Program dependence - Run-time information - Static program - User study - Visualization models","723.2 Data Processing and Image Processing - 902.1 Engineering Graphics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Tackling software navigation issues of the Smalltalk IDE","20102813074723","Röthlisberger, David (1); Nierstrasz, Oscar (1); Bergel, Alexandre (2); Ducasse, Stéphane (3) ","(1) Software Composition Group, University of Bern, Switzerland (2) Computer Science Department (DCC), University of Chile, Chile (3) INRIA-Lille Nord Europe, France ","Röthlisberger, D.(roethlis@iam.unibe.ch) ","","Proceedings of the International Workshop on Smalltalk Technologies 2009, IWST'09 - ESUG 2009 Smalltalk Joint Event","Proc. Int. Workshop Smalltalk Technol., IWST - ESUG Smalltalk Jt. Event","ACM Special Interest Group on Programming Languages (SIGPLAN); ESUG","Association for Computing Machinery, 1515 Broadway, 17th Floor, New York, NY 10036-5701, United States","","","58-67","2009","Proceedings of the International Workshop on Smalltalk Technologies 2009, IWST'09 - ESUG 2009 Smalltalk Joint Event","2009","English","","","","9781605588995","10.1145/1735935.1735945","","International Workshop on Smalltalk Technologies 2009, IWST'09","August 31, 2009 - August 31, 2009","Brest, France","80976","","Conference article (CA)","The IDE used in most Smalltalk dialects, including Pharo, Squeak and Cincom Smalltalk, did not evolve significantly over the last years, if not to say decades. For other languages, for instance Java, the available IDEs made tremendous progress as Eclipse and Net-Beans illustrate. While the Smalltalk IDE served as an exemplar for many years, other IDEs caught up or even overtook the erstwhile leader in terms of feature-richness, usability and code navigation facilities. In this paper we first analyze the difficulty of software navigation in the Smalltalk IDE and second illustrate with concrete examples the features we added to the Smalltalk IDE to fill the gap to modern IDEs and to provide novel, improved means to navigate source space. We show that thanks to the agility and dynamics of Smalltalk, we are able to extend and enhance with reasonable effort the Smalltalk IDE to better support software navigation, program comprehension, and software maintenance in general. One such support is the integration of dynamic information into the static source views we are familiar with. Other means include easing the access to static information (for instance by better arranging important packages) or helping developers locating artifacts of interest. Copyright 2009 ACM.","","16","Computer software maintenance","Computer software - Integrodifferential equations - Java programming language - Navigation - Visualization","Code navigation - Development environment - Dynamic information - Program comprehension - Smalltalk - Software analysis - Software maintenance - source code navigation - Source codes - Source space - Static information - Static sources","902.1 Engineering Graphics - 723.1.1 Computer Programming Languages - 723 Computer Software, Data Handling and Applications - 921.2 Calculus - 716.3 Radio Systems and Equipment - 434.4 Waterway Navigation - 431.5 Air Navigation and Traffic Control - 655.1 Spacecraft, General",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"MAGISTER: Quality assurance of Magic applications for software developers and end users","20105113494519","Nagy, Csaba (1); Vidács, László (1); Ferenc, Rudolf (1); Gyimóthy, Tibor (1); Kocsis, Ferenc (2); Kovács, István (2) ","(1) University of Szeged, Department of Software Engineering, Research Group on Artificial Intelligence, Hungary (2) SZEGED Software Zrt., Hungary ","Nagy, C.(ncsaba@inf.u-szeged.hu) ","","IEEE International Conference on Software Maintenance, ICSM","IEEE Int. Conf. Softw. Maint. ICSM","IEEE Computer Society; ACI Worldwide; Microsoft; IBM; Alcatel-Lucent","IEEE Computer Society, 10662 Los Vaqueros Circle - P.O. Box 3014, Los Alamitos, CA 90720-1314, United States","","","","2010","Proceedings - 2010 IEEE International Conference on Software Maintenance, ICSM 2010","2010","English","","","","9781424486298","10.1109/ICSM.2010.5609550","5609550","2010 IEEE International Conference on Software Maintenance, ICSM 2010","September 12, 2010 - September 18, 2010","Timisoara, Romania","82750","","Conference article (CA)","Nowadays there are many tools and methods available for source code quality assurance based on static analysis, but most of these tools focus on traditional software development techniques with 3GL languages. Besides procedural languages, 4GL programming languages such as Magic 4GL and Progress are widely used for application development. All these languages lie outside the main scope of analysis techniques. In this paper we present MAGISTER, which is a quality assurance framework for applications being developed in Magic, a 4GL application development solution created by Magic Software Enterprises. MAGISTER extracts data using static analysis methods from applications being developed in different versions of Magic (v5-9 and uniPaaS). The extracted data (including metrics, rule violations and dependency relations) is presented to the user via a GUI so it can be queried and visualized for further analysis. It helps software developers, architects and managers through the full development cycle by performing continuous code scans and measurements. © 2010 IEEE.","","8","Quality control","Computer software maintenance - Computer software selection and evaluation - Quality assurance - Reverse engineering - Software design - Static analysis","Analysis techniques - Application development - Dependency relation - Development cycle - End users - Magic 4GL - Metrics - Procedural languages - Programming language - Rule violation - Software developer - Software development techniques - Software enterprise - Source codes - Static analysis method - Tools and methods","723 Computer Software, Data Handling and Applications - 913.3 Quality Assurance and Control",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Support for static concept location with sv3D","20134416933905","Xie, Xinrong (1); Poshyvanyk, Denys (1); Marcus, Andrian (1) ","(1) Department of Computer Science, Wayne State University, Detroit, MI 48202, United States ","","","Proceedings - VISSOFT 2005: 3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis","Proc. - VISSOFT: IEEE Int. Workshop Vis. Softw. Underst. Analy.","IEEE Computer Society","IEEE Computer Society, 10662 Los Vaqueros Circle - P.O. Box 3014, Los Alamitos, CA 90720-1314, United States","","","102-107","2005","Proceedings - VISSOFT 2005: 3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis","2005","English","","","0780395409","9780780395404","10.1109/VISSOF.2005.1684315","1684315","3rd IEEE International Workshop on Visualizing Software for Understanding and Analysis, VISSOFT 2005","September 25, 2005 - September 25, 2005","Budapest, Hungary","100371","","Conference article (CA)","The paper presents a new visualization approach to support static concept location in source code. The approach is realized through the combination of two existing tools: IRiSS, which is an information retrieval based tool that support source code searching and browsing; and sv3D, which is a software visualization front end Both tools are integrated into MS Visual Studio NET. The motivation behind the approach, the definition of the visual mappings, and usage examples are also presented in the paper, together with an outline of future and related work. © 2005 IEEE.","","16","Tools","Visualization","Concept locations - Related works - Software visualization - Source codes - Visual mapping - Visual studios","603 Machine Tools - 605 Small Tools and Hardware - 902.1 Engineering Graphics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Approach to static prediction and visual analysis of program execution time","2003307563102","Sun, Chang-Ai (1); Jin, Mao-Zhong (1); Liu, Chao (1); Jin, Ruo-Ming (1) ","(1) Dept. of Comp. Sci. and Eng., Beijing Univ. of Aero. and Astron., Beijing 100083, China ","Sun, C.-A.(sca@sei.buaa.edu.cn) ","","Ruan Jian Xue Bao/Journal of Software","Ruan Jian Xue Bao","","Chinese Academy of Sciences","14","1","68-75","January 2003","","2003","Chinese","10009825","","","","","","","","","","RUXUEW","Journal article (JA)","An important issue of real-time software development is to analyze and predict the execution time of real-time software. A kind of visual prediction and analysis framework of the execution time of real-time software based on program flowchart is proposed. The key issues of implementing the framework are discussed in detail, including creating the mapping between intermediate code segment and statement line of source code, retrieving the time of any given program segment from the perspective of CPU cycles of goal machine instruct, calculating CPU cycles of statement lines of source code, point-to-point WCETC (worst case execution time calculated) analysis algorithm based on program flowchart, and transforming CPU cycle into physical time. Based on the framework, a practical tool has been developed to predicate and analyze visually the program execution time. Finally, conclusion and comparison between the work in this paper and others is given.","","12","Software engineering","Algorithms - Flowcharting - High level languages","Program execution time evaluation - Real time software - Software testing","723 Computer Software, Data Handling and Applications","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Proceedings of the 2002 ACM SIGPLAN-SIGSOFT workshop on program analysis for software tools and engineering","2003307565908","",,"","","ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering","ACM SIGPLAN SIGSOFT Workshop Program Anal Software Tools Eng","Association for Computing and Machinery; Special Interest Group om Programming Languages; Special Interest Group on Software Engineering","Association for Computing Machinery","","","","2002","","2002","English","","","","","","","Proceedings of the 4th 2002 ACM SIGPLAN SIGSOFT Workshop on Program Analysis for Software Tools and Engineering","November 18, 2002 - November 19, 2002","Charleston, SC, United states","61232","","Conference proceeding (CP)","The proceedings contains 10 papers from the conference on the Proceedings of the 2002 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering. The topics discussed include: monitoring deployed software using software tomography; recompilation for debugging support in JIT-compiler; instruction-level reverse execution for debugging; selective path profiling and combining static and dynamic data in code visualization.","(Edited Abstract)",,"Computer aided software engineering","Algorithms - Binary codes - Computer software selection and evaluation - Computerized tomography - Data compression - Information theory - Java programming language - Motion planning - Program compilers - Program debugging","Data definition languages - Debugging aids - EiRev - Path profiling - Reverse execution - Software tomography","716.1 Information Theory and Signal Processing - 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.2 Data Processing and Image Processing - 723.4 Artificial Intelligence - 723.5 Computer Applications","Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Seesoft--A tool for visualizing line oriented software statistics","1993040687416","Eick, Stephen G. ; Steffen, Joseph L. ; Sumner Jr., Eric E. ",,"Eick, Stephen G. ","","IEEE Transactions on Software Engineering","IEEE Trans Software Eng","","","18","11","957-968","Nov 1992","","1992","English","00985589","","","","10.1109/32.177365","","","","","","IESEDJ","Journal article (JA)","The Seesoft software visualization system allows one to analyze up to 50,000 lines of code simultaneously by mapping each line of code into a thin row. The color of each row indicates a statistic of interest, e.g., red rows are those most recently changed, and blue are those least recently changed. Seesoft displays data derived from a variety of sources, such as version control systems that track the age, programmer, and purpose of the code (e.g., control ISDN lamps, fix bug in call forwarding); static analyses, (e.g., locations where functions are called); and dynamic analyses (e.g., profiling). By means of direct manipulation and high interaction graphics, the user can manipulate this reduced representation of the code in order to find interesting patterns. Further insight is obtained by using additional windows to display the actual code. Potential applications for Seesoft include discovery, project management, code tuning, and analysis of development methodologies.","","20","Software engineering","Color computer graphics - Computer vision - Statistical methods","Software visualization systems","723.5 Computer Applications - 922.2 Mathematical Statistics","Applications (APP); Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Experimental and FE analysis of quasi-static bending of foam-filled structures","20121314889490","Kinoshita, Shigeaki (1); Lu, Guoxing (2); Ruan, Dong (1); Beynon, John (1) ","(1) Faculty of Engineering and Industrial Sciences, Swinburne University of Technology, John Street, Hawthorn, VIC 3122, Australia (2) Nanyang Technological Univ., Singapore ","Kinoshita, S.(shigeakikinoshita@swin.edu.au) ","","SAE Technical Papers","SAE Techni. Paper.","","SAE International, 400 Commonwealth Drive, Warrendale, PA 15096-0001, United States","","","44-54","2010","","2010","English","","","","","10.4271/2010-01-0020","","SAE 2010 World Congress and Exhibition","April 13, 2010 - April 13, 2010","Detroit, MI, United states","87929","","Conference article (CA)","Three-point bending under quasi-static loading was carried out on empty and partially foam-filled tubes. ALPORASAˆ aluminium foam was used as an insert with aluminium alloy tube in the experiment. The experiment was modelled using the finite element (FE) code software package LS-DYNAAˆ. The Deshpande-Fleck constitutive model was implemented in the simulation to model the foam. Its material parameters were calibrated against experimental data. The material parameters for the tube were also derived experimentally. Experimental data showed increase in specific energy absorption of approximately 17% whilst the lowest generator of the tube was found to increase by approximately 14% with inclusion of partially filling foam. The FE simulations compared well with the experiments, with the load-displacement and LG-indenter displacement agreeing within approximately 15%. Visual inspection of the foam showed local densification around the point of indentation. Similar features were seen in the FE simulation with high strains and large deformation present near the point of indentation. The results thus indicated a localised effect in energy absorption of the foam in the scenario being studied. Copyright © 2010 SAE International.","","31","Computer simulation","Bending (forming) - Energy absorption - Experiments - Structural analysis - Tubes (components)","Aluminium alloy tube - Aluminium foam - Experimental data - FE analysis - FE-simulation - Finite element codes - Foam-filled tubes - High strains - Large deformations - Load displacements - Material parameter - Quasi-static - Quasi-static loading - Specific energy absorption - Three point bending - Visual inspection","408.1 Structural Design, General - 535.2 Metal Forming - 616.1 Heat Exchange Equipment and Components - 723.5 Computer Applications - 901.3 Engineering Research - 931.3 Atomic and Molecular Physics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Experimental and FE analysis of quasi-static bending of foam-filled structures","20105013477910","Kinoshita, Shigeaki (1); Lu, Guoxing (2); Ruan, Dong (1); Beynon, John (1) ","(1) Faculty of Engineering and Industrial Sciences, Swinburne University of Technology, John Street, Hawthorn, VIC.3122, Australia (2) Nanyang Technological University, Singapore ","Kinoshita, S.(shigeakikinoshita@swin.edu.au) ","","SAE International Journal of Materials and Manufacturing","SAE Int. J. Mater. Manuf.","","SAE International, 400 Commonwealth Drive, Warrendale, PA 15096-0001, United States","3","1","44-54","August 2010","","2010","English","19463979","19463987","","","10.4271/2010-01-0020","","","","","","","Journal article (JA)","Three-point bending under quasi-static loading was carried out on empty and partially foam-filled tubes. ALPORAS® aluminium foam was used as an insert with aluminium alloy tube in the experiment. The experiment was modelled using the finite element (FE) code software package LS-DYNA®. The Deshpande-Fleck constitutive model was implemented in the simulation to model the foam. Its material parameters were calibrated against experimental data. The material parameters for the tube were also derived experimentally. Experimental data showed increase in specific energy absorption of approximately 17% whilst the lowest generator of the tube was found to increase by approximately 14% with inclusion of partially filling foam. The FE simulations compared well with the experiments, with the load displacement and LG-indenter displacement agreeing within approximately 15%. Visual inspection of the foam showed local densification around the point of indentation. Similar features were seen in the FE simulation with high strains and large deformation present near the point of indentation. The results thus indicated a localised effect in energy absorption of the foam in the scenario being studied. © 2010 SAE International.","","31","Computer simulation","Absorption - Aluminum - Bending (forming) - Energy absorption - Experiments - Iron alloys - Structural analysis - Tubes (components) - Vickers hardness testing","Aluminium alloy tube - Aluminium foam - Experimental data - FE analysis - FE-simulation - Finite element codes - High strains - Indenters - Large deformations - Load displacements - LS-DYNA - Material parameter - Quasi-static - Quasi-static loading - Specific energy absorption - Three point bending - Visual inspection","931.2 Physical Properties of Gases, Liquids and Solids - 901.3 Engineering Research - 723.5 Computer Applications - 616.1 Heat Exchange Equipment and Components - 931.3 Atomic and Molecular Physics - 545.3 Steel - 535.2 Metal Forming - 422.2 Strength of Building Materials : Test Methods - 408.1 Structural Design, General - 541.1 Aluminum",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Compiler Construction: 17th International Conference, CC 2008 - Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2008, Proceedings","20083011391918","",,"","","Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)","Lect. Notes Comput. Sci.","","Springer Verlag, Tiergartenstrasse 17, Heidelberg, D-69121, Germany","4959 LNCS","","","2008","Compiler Construction - 17th International Conference, CC 2008 - Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2008, Proceedings","2008","English","03029743","16113349","3540787909","9783540787907","","","17th International Conference on Compiler Construction, CC 2008","March 29, 2008 - April 6, 2008","Budapest, Hungary","72576","","Conference proceeding (CP)","The proceedings contain 19 papers. The topics discussed include: design choices in a compiler course or how to make undergraduates love formal notation; improved memory-access analysis for x86 executables; a system for generating static analyzers for machine instructions; IDE dataflow analysis in the presence of large object-oriented libraries; an adaptive strategy for inline substitution; automatic transformation of bit-level C code to support multiple equivalent data layouts; control flow emulation on tiled SIMD architectures; generating SIMD vectorized permutations; how to do a million watchpoints: efficient debugging using dynamic instrumentation; compiler-guaranteed safety in code-copying virtual machines; hardware JIT compilation for off-the-shelf dynamically reconfigurable FPGAs; visualization of program dependence graphs; and on the relative completeness of bytecode analysis versus source code analysis.","(Edited Abstract)",,"Program compilers","Access control - Adaptive control systems - Codes (standards) - Codes (symbols) - Computer debugging - Concurrency control - Control system analysis - Curricula - Data flow analysis - Data storage equipment - Data visualization - Digital libraries - Machine design - Military data processing - Program debugging - Security of data - Static analysis","Adaptive strategies - Automatic transformations - Byte codes - Compiler construction - Conferences (Chemical industry) - Control flows - Data layouts - Data-flow analysis - Dynamic instrumentation - European - Executables - International conferences - Just in time (JIT) compilation - Machine instructions - Object oriented libraries - Program dependence graph (PDG) - Re-configurable - SIMD architectures - Source code analysis - Static analyzers - Virtual machine (VM)","901.2 Education - 731.1 Control Systems - 723.5 Computer Applications - 723.3 Database Systems - 902.2 Codes and Standards - 723.2 Data Processing and Image Processing - 723 Computer Software, Data Handling and Applications - 722.1 Data Storage, Equipment and Techniques - 601 Mechanical Design - 723.1 Computer Programming",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Heapviz: Interactive heap visualization for program understanding and debugging","20110213556694","Aftandilian, Edward E. (1); Kelley, Sean (1); Gramazio, Connor (1); Ricci, Nathan (1); Su, Sara L. (1); Guyer, Samuel Z. (1) ","(1) Department of Computer Science, Tufts University, United States ","Aftandilian, E. E.(eaftan@cs.tufts.edu) ","","Proceedings of the ACM Conference on Computer and Communications Security","Proc ACM Conf Computer Commun Secur","ACM SIGCHI; ACM SIGPLAN; ACM SIGGRAPH; ACM SIGSOFT","Association for Computing Machinery, 1515 Broadway, 17th Floor, New York, NY 10036-5701, United States","","","53-62","2010","SOFTVIS'10 - Proceedings of the 2010 International Symposium on Software Visualization, Co-located with VisWeek 2010","2010","English","15437221","","","9781450304948","10.1145/1879211.1879222","","2010 5th International Symposium on Software Visualization, SOFTVIS'10, Co-located with VisWeek 2010","October 25, 2010 - October 26, 2010","Salt Lake City, UT, United states","83142","","Conference article (CA)","Understanding the data structures in a program is crucial to understanding how the program works, or why it doesn't work. Inspecting the code that implements the data structures, however, is an arduous task and often fails to yield insights into the global organization of a program's data. Inspecting the actual contents of the heap solves these problems but presents a significant challenge of its own: finding an effective way to present the enormous number of objects it contains. In this paper we present Heapviz, a tool for visualizing and exploring snapshots of the heap obtained from a running Java program. Unlike existing tools, such as traditional debuggers, Heapviz presents a global view of the program state as a graph, together with powerful interactive capabilities for navigating it. Our tool employs several key techniques that help manage the scale of the data. First, we reduce the size and complexity of the graph by using algorithms inspired by static shape analysis to aggregate the nodes that make up a data structure. Second, we introduce a dominator-based layout scheme that emphasizes hierarchical containment and ownership relations. Finally, the interactive interface allows the user to expand and contract regions of the heap to modulate data structure detail, inspect individual objects and field values, and search for objects based on type or connectivity. By applying Heapviz to both constructed and real-world examples, we show that Heapviz provides programmers with a powerful and intuitive tool for exploring program behavior. Copyright 2010 ACM.","","32","Program debugging","Computer software - Data structures - Inspection - Java programming language - Visualization","Debugging - Graphs - Interactive visualizations - Program understanding - Software visualization","723 Computer Software, Data Handling and Applications - 902.1 Engineering Graphics - 913.3.1 Inspection",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Monitoring compliance of a software system with its high-level design models","1996273167575","Sefika, Mohlalefi (1); Sane, Aamod (1); Campbell, Roy H. (1) ","(1) Univ of Illinois at Urbana-Champaign, Urbana, United States ","Sefika, Mohlalefi ","","Proceedings - International Conference on Software Engineering","Proc Int Conf Software Eng","IEEE","IEEE, Los Alamitos, CA, United States","","","387-396","1995","","1995","English","02705257","","","","","","Proceedings of the 1996 18th International Conference on Software Engineering","March 25, 1996 - March 29, 1996","Berlin, Ger","44661","PCSEDE","Conference article (CA)","As a complex software system evolves, its implementation tends to diverge from the intended or documented design models. Such undesirable deviation makes the system hard to understand, modify, and maintain. This paper presents a hybrid computer-assisted approach for confirming that the implementation of a system maintains its expected design models and rules. Our approach closely integrates logic-based static analysis and dynamic visualization, providing multiple code views and perspectives. We show that the hybrid technique helps determine design-implementation congruence at various levels of abstraction: concrete rules like coding guidelines, architectural models like design patterns[7] or connectors[26], and subjective design principles like low coupling and high cohesion. The utility of our approach has been demonstrated in the development of μChoices, a new multimedia operating system which inherits many design decisions and guidelines learned from experience in the construction and maintenance of its predecessor, Choices.","","26","Computer aided software engineering","Computer aided design - Computer architecture - Computer operating systems - Computer programming - Computer simulation - Computer software - High level languages - Hybrid computers","Complex software system - Dynamic visualization - High level design models - Logic based static analysis","722.5 Analog and Hybrid Computers - 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.5 Computer Applications","Applications (APP)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Kinetic parameters evaluation of PWRs using static cell and core calculation codes","20120214672080","Jahanbin, Ali (1); Malmir, Hessam (1) ","(1) Department of Energy Engineering, Sharif University of Technology, Azadi Street, Tehran, Iran ","Jahanbin, A.(ali_jahanbin@alum.sharif.ir) ","","Annals of Nuclear Energy","Ann Nucl Energy","","Elsevier Ltd, Langford Lane, Kidlington, Oxford, OX5 1GB, United Kingdom","41","","110-114","March 2012","","2012","English","03064549","","","","10.1016/j.anucene.2011.11.018","","","","","","ANENDJ","Journal article (JA)","In this paper, evaluation of the kinetic parameters (effective delayed neutron fraction and prompt neutron lifetime) in PWRs, using static cell and core calculation codes, is reported. A new software has been developed to link the WIMS, BORGES and CITATION codes in Visual C# computer programming language. Using the WIMS cell calculation code, multigroup microscopic cross-sections and number densities of different materials can be generated in a binary file. By the use of BORGES code, these binary-form cross-sections and number densities are converted to a format readable by the CITATION core calculation code, by which the kinetic parameters can be finally obtained. This software is used for calculation of the kinetic parameters in a typical VVER-1000 and NOK Beznau reactor. The ratios (βeff)i(βeff) core, which are the important input data for the reactivity accident analysis, are also calculated. Benchmarking of the results against the final safety analysis report (FSAR) of the aforementioned reactors shows very good agreements with these published documents. © 2011 Published by Elsevier Ltd.","","12","Neutrons","Cells - Codes (symbols) - Computer programming - Kinetic parameters - Reactor cores","Accident analysis - Binary files - Calculation code - Core calculations - Effective delayed neutron fraction - Input datas - Multi-group - Number density - Power reactor - Prompt-neutron lifetime - Safety analysis reports - Visual C","461.2 Biological Materials and Tissue Engineering - 621.1.1 Fission Reactor Equipment and Components - 723.1 Computer Programming - 723.2 Data Processing and Image Processing - 931 Classical Physics; Quantum Theory; Relativity - 931.3 Atomic and Molecular Physics",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"T-Morph: Revealing buggy behaviors of TinyOS applications via rule mining and visualization","20125215831078","Zhou, Yangfan (1, 2); Chen, Xinyu (1); Lyu, Michael R. (2, 3); Liu, Jiangchuan (4) ","(1) Shenzhen Research Institute, Chinese Univ. of Hong Kong, Shenzhen, China (2) Dept. of Computer Sci. and Eng., Chinese Univ. of Hong Kong, Hong Kong, Hong Kong (3) School of Computers, National Univ. of Defense Technology, Changsha, China (4) School of Computing Science, Simon Fraser Univ., Burnaby, BC, Canada ","Zhou, Y. ","","Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE 2012","Proc. ACM SIGSOFT Int. Symp. Found. Softw. Eng., FSE","Assoc. Comput. Mach., Spec. Interest; Group Softw. Eng. (ACM SIGSOFT)","Association for Computing Machinery, General Post Office, P.O. Box 30777, NY 10087-0777, United States","","","","2012","Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE 2012","2012","English","","","","9781450316149","10.1145/2393596.2393615","","20th ACM SIGSOFT International Symposium on the Foundations of Software Engineering, FSE 2012","November 11, 2012 - November 16, 2012","Cary, NC, United states","94505","","Conference article (CA)","TinyOS applications for Wireless Sensor Networks (WSNs) typically run in a complicated concurrency model. It is difficult for developers to precisely predict the dynamic execution process of a TinyOS application by its static source codes. Such a conceptual gap frequently incurs software bugs, due to unexpected system behaviors caused by unknown execution patterns. This paper presents T-Morph (TinyOS application tomography), a novel tool to mine, visualize, and verify the execution patterns of TinyOS applications. T-Morph abstracts the dynamic execution process of a TinyOS application into simple, structured application behavior models, which well reflect how the static source codes are executed. Furthermore, T-Morph visualizes them in a user-friendly manner. Therefore, WSN developers can readily see if their source codes run as intended by simply verifying the correctness of the models. Finally, the verified models allow T-Morph to automatically check the application behaviors during a long-term testing execution. The suggested model violations can unveil potential bugs and direct developers to suspicious locations in the source codes. We have implemented T-Morph and applied it to verify a series of representative real-life TinyOS applications and find several bugs, including a new bug in the latest release of TinyOS. It shows T-Morph can provide substantial help to verify TinyOS applications. © 2012 ACM.","","35","Program debugging","Computer programming languages - Dynamic analysis - Sensor networks - Software engineering - Wireless sensor networks","Application behavior models - Dynamic execution - Rule mining - Software bug - Source codes - Static sources - System behaviors - TinyOS - Wireless sensor network (WSNs)","422.2 Strength of Building Materials : Test Methods - 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 732 Control Devices",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"K-scope: A Java-based Fortran source code analyzer with graphical user interface for performance improvement","20125115821862","Terai, Masaaki (1); Murai, Hitoshi (1); Minami, Kazuo (1); Yokokawa, Mitsuo (1); Tomiyama, Eiji (2) ","(1) RIKEN Advanced Institute for Computational Science, 1-26, Minatojima-minami-machi 7-chome, Chuo-ku, Kobe, Hyogo 650-0047, Japan (2) Research Organization for Information Science and Technology, 3F Kobe KIMEC Center Bldg., 1-5-2, Minatojima-minami-machi, Chuo-ku, Kobe, Hyogo 650-0047, Japan ","Terai, M.(teraim@riken.jp) ","","Proceedings of the International Conference on Parallel Processing Workshops","Proc. Int. Conf. Parallel Process. Workshops","Int. Assoc. Comput. Commun. (IACC)","Institute of Electrical and Electronics Engineers Inc., 445 Hoes Lane / P.O. Box 1331, Piscataway, NJ 08855-1331, United States","","","434-443","2012","Proceedings - 41st International Conference on Parallel Processing Workshops, ICPPW 2012","2012","English","15302016","","","9780769547954","10.1109/ICPPW.2012.61","6337511","41st International Conference on Parallel Processing Workshops, ICPPW 2012","September 10, 2012 - September 13, 2012","Pittsburgh, PA, United states","94437","","Conference article (CA)","Given that scientific computer programs are becoming larger and more complicated, high performance application developers routinely examine the program structure of their source code to improve their performance. We have developed K-scope, a source code analysis tool that can be used to improve code performance. K-scope has graphical user interface that visualizes program structures of Fortran 90 and FORTRAN 77 source code and enables static data-flow analysis. To develop the tool, we adopted the filtered abstract syntax tree (filtered-AST) model with Java to visualize the program structure efficiently. Filtered-AST, which extends the AST in the structured programming model by abstract block structuring, is suitable for visualization program structures. Based on this model, K-scope has been developed as an experimental implementation. It constructs filtered-AST objects from both source and intermediate code generated by the front-end of the XcalableMP compiler. We provide illustrations of the graphical user interface and give detailed examples of the tool applied to an actual application code. © 2012 IEEE.","","20","Java programming language","Computer software - FORTRAN (programming language) - Graphical user interfaces - Program compilers - Structured programming","Abstract Syntax Trees - Application codes - Code performance - Core performance - filtered-AST - Fortran 77 - Fortran 90 - High performance applications - Performance improvements - Program structures - Source code analysis - Source codes - Static sources - XcalableMP compiler","722.2 Computer Peripheral Equipment - 723 Computer Software, Data Handling and Applications",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Cognitive design elements to support the construction of a mental model during software exploration","1999124548429","Storey, M.-A.D. (1); Fracchia, F.D. (1); Muller, H.A. (1) ","(1) Simon Fraser Univ, Burnaby, Canada ","Storey, M.-A.D. ","","Journal of Systems and Software","J Syst Software","","Elsevier Science Inc, New York, NY, United States","44","3","171-185","Jan 1 1999","","1999","English","01641212","","","","10.1016/S0164-1212(98)10055-9","","","","","","JSSODM","Journal article (JA)","The scope of software visualization tools which exist for the navigation, analysis and presentation of software information varies widely. One class of tools, which we refer to as Software exploration tools, provides graphical representations of static software structures linked to textual views of the program source code and documentation. This paper describes a hierarchy of cognitive issues which should be considered during the design of a software exploration tool. The hierarchy of cognitive design elements is derived through the examination of program comprehension cognitive models. Examples of how existing tools address each of these issues are provided. In addition, this paper demonstrates how these cognitive design elements may be applied to the design of an effective interface for software exploration.","","72","Computer aided software engineering","Cognitive systems - Graphical user interfaces - Hierarchical systems - Utility programs - Visualization","Cognitive design elements - Software exploration tools","722.2 Computer Peripheral Equipment - 723.1 Computer Programming - 723.4 Artificial Intelligence - 723.5 Computer Applications","Literature review (LIT); Theoretical (THR)","Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"Concurrent object-oriented programming: A visualization challenge","20090511887845","Widjaja, Hendra (1); Oudshoorn, Michael J. (1) ","(1) Department of Computer Science, University of Adelaide, SA 5005, Australia ","Widjaja, H. ","","Proceedings of SPIE - The International Society for Optical Engineering","Proc SPIE Int Soc Opt Eng","","SPIE, P.O. Box 10, Bellingham WA, WA 98227-0010, United States","3017","","310-321","1997","Visual Data Exploration and Analysis IV","1997","English","0277786X","","","","10.1117/12.270311","","Visual Data Exploration and Analysis IV","February 12, 1997 - February 12, 1997","San Jose, CA, United states","75199","PSISDG","Conference article (CA)","Understanding and subsequently fine-tuning concurrent object-oriented programs may be difficult. To alleviate this situation, program visualization can be used. This research focuses on the question of what and how such visualization can be done for concurrent object-oriented systems. Furthermore, in the absence of language support, to what extent such visualization can be realized. To investigate these issues, Visor++, a tool for visualizing CC++ programs, is developed. This research proposes that both static and dynamic views of programs are important. However, many languages, including CC++, do not provide adequate support for program visualization. CC++, in particular, provides rudimentary support which is available only in the low-level run-time system. Therefore, proper support must be facilitated by Visor++. To make such support portable and maintainable, it is provided at the CC++ source-code level. Although some information, such as changes in variable and data structure values, cannot be easily captured by such an approach, experiments with Visor++ have shown that the information obtained can be of valuable assistance for understanding and fine-tuning programs. ©2004 Copyright SPIE - The International Society for Optical Engineering.","","21","Object oriented programming","Concurrency control - Data structures - Linguistics - Programming theory - Query languages - Tuning - Visualization","CC++ - Concurrent - Object-oriented - Program visualisation - Software visualisation - Visualisation","902.1 Engineering Graphics - 744.1 Lasers, General - 731.3 Specific Variables Control - 723.3 Database Systems - 723.2 Data Processing and Image Processing - 903.2 Information Dissemination - 723.1.1 Computer Programming Languages - 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 716.4 Television Systems and Equipment - 716.3 Radio Systems and Equipment - 713 Electronic Circuits - 723.1 Computer Programming",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"An interactive change impact analysis based on an architectural reflexion model approach","20110413625465","Kim, Tae-Hyung (1); Kim, Kimun (1); Kim, Woomok (1) ","(1) Software Engineering Lab., DMC RandD Center, Samsung Electronics, Korea, Republic of ","Kim, T.-H.(taehyung4u.kim@samsung.com) ","","Proceedings - International Computer Software and Applications Conference","Proc Int Comput Software Appl Conf","IEEE; IEEE Computer Society","IEEE Computer Society, 445 Hoes Lane - P.O.Box 1331, Piscataway, NJ 08855-1331, United States","","","297-302","2010","Proceedings - 34th Annual IEEE International Computer Software and Applications Conference, COMPSAC 2010","2010","English","07303157","","","9780769540856","10.1109/COMPSAC.2010.37","5676272","34th Annual IEEE International Computer Software and Applications Conference, COMPSAC 2010","July 19, 2010 - July 23, 2020","Seoul, Korea, Republic of","83606","PSICD2","Conference article (CA)","To establish the software architecture based on the source code and analyze the impact of its change, we provide an architectural reflexion model that is a simplified version of the reflexion model and an interactive change impact analysis tool. The architectural reflexion model is performed in order to reconstruct the software architecture of a software system based on the static analysis information extracted from its source code. When the architecture of the software system is refined and established, its internal elements affected by the changes can be visualized by the interactive impact analysis tool we implement. The main objective of our approach is to support maintenance of rapidly changing and evolving software systems, usually developed in high-technology companies by means of providing an agile and practical way to reconstruct the software architecture of a large-scale software system and let the user take a snapshot of its internal dependencies on a basis of changes. A case study using an open source project of the large-scale embedded software platform for mobile phone products illustrates how our approach applied and presents its usefulness and effectiveness. © 2010 IEEE.","","13","Software architecture","Computer applications - Computer software maintenance - Embedded software - Maintenance of way - Open systems - Static analysis - Telecommunication equipment","Change impact analysis - High-technology - Impact analysis - Large-scale software systems - Model approach - Open source projects - Software systems - Source codes","681 Railway Plant and Structures - 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 723 Computer Software, Data Handling and Applications - 723.5 Computer Applications",,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
"SCAM 2007 - Proceedings Seventh IEEE International Working Conference on Source Code Analysis and Manipulation","20083011406177","",,"","Anon ","SCAM 2007 - Proceedings 7th IEEE International Working Conference on Source Code Analysis and Manipulation","SCAM - Proc. IEEE Int. Work. Conf. Source Code Anal. Manip.","IEEE Computer Society Technical Council on Software Engineering; CEA Laboratoire d'Integration des Systemes et des Technologies; Ecole Polytechnique (France); Software Improvement Group; CREST, King's College London","Institute of Electrical and Electronics Engineers Computer Society, Piscataway, NJ 08855-1331, United States","","","","","SCAM 2007 - Proceedings 7th IEEE International Working Conference on Source Code Analysis and Manipulation","2007","English","","","0769528805","9780769528809","","","7th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2007","Sep 30 - Oct 1 2007","Paris, France","72740","","Conference proceeding (CP)","The proceedings contain 23 papers. The topics discussed include: an evaluation of slicing algorithms for concurrent programs; barrier slicing for remote software trusting; statement-level cohesion metrics and their visualization; on temporal path conditions in dependence graphs; towards path-sensitive points-to analysis; extending attribute grammars with collection attributes-valuation and applications; reengineering standard Java runtime systems through dynamic bytecode instrumentation; an integrated crosscutting concern migration strategy and its application to JHOTDRAW; fast approximate matching of programs for protecting libre/open source software by using spatial indexes; finding inputs that reach a target expression; improved static resolution of dynamic class loading in Java; DATES: design analysis tool for enterprise systems; source code composition with the reuseware composition framework; and quality assessment for embedded SQL.","(Edited Abstract)",,,,,,,"Compendex","Compilation and indexing terms, Copyright 2014 Elsevier Inc.","Engineering Village"
